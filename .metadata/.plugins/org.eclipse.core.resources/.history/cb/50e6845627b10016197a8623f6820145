package cn.ucai.day28;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/**
 * 1、字节流
 * 2、跟文件打交道，用文件输入输出流
 * 
 * 基本流如果不能完成指定任务，就考虑包装。
 * 
 * 写 double d = 3.14;到文件中
 * 
 * 1、既然写，肯定是输出流
 * 2、既然写到文件，肯定是文件流，肯定是FileOutputStream
 * 3、  FileOutputStream无法完成double类型数据的写入，就考虑包装。
 * 4、DataOutputStream提供了增强的功能，只能通过包装基本流来使用
 * 
 * DataOutputStream dos = new DataOutputStream(new FileOutputStream(new File("E:/abc/a.txt")));
 * dos.writeDouble(3.14);
 * 
 * 写对象到文件中
 * 1、既然写，肯定是输出流
 * 2、既然写到文件，肯定是文件流，肯定是FileOutputStream
 * 3、  FileOutputStream无法完成写对象的功能，就考虑包装。
 * 4、ObjectOutputStream
 * 
 * 跟介质（数据可以存储的地方）打交道的，都叫节点流（基本流）。
 * 包装流包装的都是节点流。包装流没有和介质打交道的能力，都是通过包装来实现。
 * 
 * 流都是成对出现的：
 * 
 */
public class TestZip {
	public static void main(String[] args) {
		File fileSrc = new File("E:/abc/TestInteger.java");
		File fileDest = new File("E:/abc/test.zip");
		FileInputStream fis = null;
		ZipOutputStream zos = null;
		try {
			fis = new FileInputStream(fileSrc);
			zos = new ZipOutputStream(new FileOutputStream(fileDest));
			// 设置压缩文件中的下一个条目
			zos.putNextEntry(new ZipEntry("TestInteger.java"));
			int b = 0;
			byte[] byArr = new byte[1024*4];
			while((b=fis.read(byArr))!=-1){
				zos.write(byArr, 0, b);
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally{
			try {
				if(fis!=null){
					fis.close();
				}
				if(zos!=null){
					zos.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
